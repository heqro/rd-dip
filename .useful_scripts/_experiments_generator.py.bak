# Experimentos que hay que hacer seguro: fidelidades Gaussiana, Rician, Norma de la Rician + { TV (p=1), DCT (dim=3, dim=5, p=1). Perturbación Gaussiana en cada iteración del DIP.

#     Variaciones posibles:
#         Perturbación Rician en cada iteración del DIP.
#         p distinto de 1.0 en regularización


scaling_coefs = [
    "1e-9",
    "1e-8",
    "1e-7",
    "1e-6",
    "1e-5",
    "1e-4",
    "1e-3",
    "1e-2",
    "1e-1",
    "1e0",
]

idx = 1
noise_std = "0.15"
contaminate_with_Rician_noise = True
dip_rician_iteration_005 = contaminate_with_Rician_noise and True
model = "AttentiveUNet"  # "UNet"

p = "1.0"
fidelities_list = ["Gaussian", "Rician", "Rician_Norm"]
regularizers_list = [
    ("Total_Variation", f"1.0:{p}"),
    ("Discrete_Cosine_Transform", f"3:{p}"),
    ("Discrete_Cosine_Transform", f"5:{p}"),
]

biningi = f"python _denoise_complex_brain.py --index {idx} --noise_std {noise_std} --model {model}"

with open("exps.sh", "w") as file:
    pass

for k, reg in enumerate(regularizers_list):
    command = f"( {biningi} "
    if contaminate_with_Rician_noise:
        command += "--contaminate_with_Rician_noise "
    for i, fid in enumerate(fidelities_list):
        for j, coef in enumerate(scaling_coefs):
            if fid.startswith("Rician"):
                command += f"--fidelities {fid}:1.0:{noise_std} "
            else:
                command += f"--fidelities {fid}:1.0 "
            command += f"--regularizers {reg[0]}:{coef}:{reg[1]} "
            command += f"--tag {model}_Std{noise_std}_{fid}_{reg[0]}:{coef}:{reg[1]}"
            if contaminate_with_Rician_noise:
                command += f"_itRician"
                if dip_rician_iteration_005:
                    command += "_0.05"
            if j < len(scaling_coefs) - 1:
                command += f"; {biningi} "
                if contaminate_with_Rician_noise:
                    command += "--contaminate_with_Rician_noise "
        if i < len(fidelities_list) - 1:
            command += f"; {biningi} "
            if contaminate_with_Rician_noise:
                command += "--contaminate_with_Rician_noise "

    command += ") &"
    with open("exps.sh", "a") as file:
        file.write(command + "\n")
command = f"( {biningi} "
if contaminate_with_Rician_noise:
    command += "--contaminate_with_Rician_noise "
for i, fid in enumerate(fidelities_list):
    if fid.startswith("Rician"):
        command += f"--fidelities {fid}:1.0:{noise_std} "
    else:
        command += f"--fidelities {fid}:1.0 "
    command += f"--tag {model}_Std{noise_std}_{fid}"
    if contaminate_with_Rician_noise:
        command += "_itRician"
        if dip_rician_iteration_005:
            command += "_0.05"
    if i < len(fidelities_list) - 1:
        command += f"; {biningi} "
        if contaminate_with_Rician_noise:
            command += "--contaminate_with_Rician_noise "
    else:
        command += ") &"
with open("exps.sh", "a") as file:
    file.write(command + "\n")
